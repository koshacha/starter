{"_path":"/projects/cryptocurrency-exchanger","_dir":"projects","_draft":false,"_partial":false,"_locale":"","title":"Cryptocurrency Exchanger","description":"A cryptocurrency buying and exchanging app created with React.js and Socket.IO.","year":2023,"sort":5,"published":true,"seoDescription":"Cryptocurrency exchanger project featuring React.js, React Router, TypeScript, Socket.IO, and Docker for efficient exchange operations.","color":"#5077FF","icon":"doodles:sphere","layout":"project","body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"introduction"},"children":[{"type":"text","value":"Introduction"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Quite an interesting project I've been working on. Using "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"React.js"}]},{"type":"text","value":", I created a website that allows users to exchange cryptocurrency. The interface was created using Tailwind CSS, and communication with the backend is mostly done using Socket.io messaging. Also, the project has a pretty simple internationalization. In this project I only worked on Frontend and a little bit on DevOps."}]},{"type":"element","tag":"h2","props":{"id":"links"},"children":[{"type":"text","value":"Links"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Git repository: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"not available due to NDA"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Website link: "},{"type":"element","tag":"a","props":{"href":"https://deswop.com","rel":["nofollow"]},"children":[{"type":"text","value":"deswop.com"}]}]}]},{"type":"element","tag":"h2","props":{"id":"choosing-a-reactjs"},"children":[{"type":"text","value":"Choosing a React.js"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The site is quite simple, globally it consists of a cryptocurrency exchange component and minimalistic content pages, so I chose React.js. I also decided to use TypeScript in this project to simplify the work of future developers and protect the client from unexpected errors."}]},{"type":"element","tag":"h2","props":{"id":"work-progress"},"children":[{"type":"text","value":"Work Progress"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The project was finished quite quickly, during the work I mastered working with Socket.io, strengthened my knowledge about dockerization of projects and about routing in React.js. Most importantly, I got to know Vite."}]},{"type":"element","tag":"h2","props":{"id":"interesting-realization-details"},"children":[{"type":"text","value":"Interesting realization details"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I decided to fully type Socket.io inbound and outbound, but as it turns out, there isn't much information about this in the official documentation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Incoming messages:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"ticker"}]},{"type":"text","value":" - contains either exchange rate data or current order data"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"order"}]},{"type":"text","value":" - contains data about created, requested order."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"And here are the outgoing messages. They are more complicated, because from the backend side all these messages were received with a single identifier \"order\"."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"currencies"}]},{"type":"text","value":" - request currency data."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"order_data"}]},{"type":"text","value":" - request order data."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"change"}]},{"type":"text","value":" - create a request for currency exchange"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"rate"}]},{"type":"text","value":" - evaluate the work of the service, whether the order was fulfilled (or not)."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I wrote the following code, which completely covered my needs in this typing and works just perfectly."}]},{"type":"element","tag":"pre","props":{"className":["language-ts"],"code":"interface ServerToClientEvents {\n  ticker: (\n    message: SocketCurrenciesMessage | SocketExchangeRateMessage\n  ) => void;\n  order: (res: OrderResponse) => void;\n}\n\nexport interface ClientSocket extends Socket<ServerToClientEvents> {\n  emit(event: \"order\", type: \"currencies\"): this;\n  emit(event: \"order\", type: \"order_data\", dto: GetOrderDto): this;\n  emit(event: \"order\", type: \"change\", dto: CreateOrderDto): this;\n  emit(event: \"order\", type: \"rate\", dto: OrderRateDto): this;\n}\n","language":"ts","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"interface ServerToClientEvents {\n  ticker: (\n    message: SocketCurrenciesMessage | SocketExchangeRateMessage\n  ) => void;\n  order: (res: OrderResponse) => void;\n}\n\nexport interface ClientSocket extends Socket<ServerToClientEvents> {\n  emit(event: \"order\", type: \"currencies\"): this;\n  emit(event: \"order\", type: \"order_data\", dto: GetOrderDto): this;\n  emit(event: \"order\", type: \"change\", dto: CreateOrderDto): this;\n  emit(event: \"order\", type: \"rate\", dto: OrderRateDto): this;\n}\n"}]}]},{"type":"element","tag":"h2","props":{"id":"images"},"children":[{"type":"text","value":"Images"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"introduction","depth":2,"text":"Introduction"},{"id":"links","depth":2,"text":"Links"},{"id":"choosing-a-reactjs","depth":2,"text":"Choosing a React.js"},{"id":"work-progress","depth":2,"text":"Work Progress"},{"id":"interesting-realization-details","depth":2,"text":"Interesting realization details"},{"id":"images","depth":2,"text":"Images"}]}},"_type":"markdown","_id":"content:projects:Cryptocurrency Exchanger.md","_source":"content","_file":"projects/Cryptocurrency Exchanger.md","_stem":"projects/Cryptocurrency Exchanger","_extension":"md"}